syntax = "proto3";
package netavark_proxy;

service NetavarkProxy {
  rpc GetLease(NetworkConfig) returns (Lease) {}
  rpc RemoveLease(MacAddress) returns (OperationResponse) {}
  rpc TearDown(Teardown) returns (OperationResponse) {}
}
// Netavark sends the proxy the Network Configuration that it wants to setup
message NetworkConfig {
  string iface = 1;
  MacAddress mac_addr = 3;
  string domain_name = 4;
  string host_name = 5;
  Version version = 6;

}
// Lease can either contain a IPv4 or IPv6 DHCP lease, and the common IP information
message Lease {
  IPResponse IpResponse = 1;
  DhcpV4Lease v4 = 2;
  DhcpV6Lease v6 = 3;

}
// Common ip information shared between DHCPv4 and DHCPv6
message IPResponse {
  uint32 t1 = 1;
  uint32 t2 = 2;
  uint32 lease_time = 3;
  uint32  mtu = 4;
  string domain_name = 5;
  MacAddress mac_addr = 6;
}

message DhcpV4Lease {
  Ipv4Addr siaddr = 1;
  Ipv4Addr yiaddr = 2;
  Ipv4Addr srv_id = 6;
  Ipv4Addr subnet_mask = 7;
  Ipv4Addr broadcast_addr = 8;
  repeated Ipv4Addr dns_servers = 9;
  repeated Ipv4Addr gateways = 10;
  repeated Ipv4Addr ntp_servers = 11;
  string host_name = 13;
}

// Todo implement v6 lease
message DhcpV6Lease {

}
// Empty Message to send when calling for a shutdown
message Teardown{}
// Response to netavark on successful teardown
message OperationResponse {
  bool success = 1;
}

enum Version {
  V4 = 0;
  V6 = 1;
}

message MacAddress {
  string addr = 1;
}

message Ipv4Addr {
  bytes octets = 1;
}

message Ipv6Addr {
  bytes octets = 1;
}
