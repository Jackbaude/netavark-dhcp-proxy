syntax = "proto3";
package netavark_proxy;

service NetavarkProxy {
  rpc GetLease(NetworkConfig) returns (DhcpV4Lease) {}
  rpc TearDown(NetworkConfig) returns (OperationResponse) {}
}
// Netavark sends the proxy the Network Configuration that it wants to setup
message NetworkConfig {
  string iface = 1;
  optional Lease lease = 2;
  uint32 version = 4;
}
// A lease can either be a Ipv4 or Ipv6 lease
message Lease {
  optional DhcpV4Lease v4 = 1;
  optional DhcpV6Lease v6 = 2;
}

message DhcpV4Lease {
  Ipv4Addr siaddr = 1;
  Ipv4Addr yiaddr = 2;
  uint32 t1 = 3;
  uint32 t2 = 4;
  uint32 lease_time = 5;
  Ipv4Addr srv_id = 6;
  Ipv4Addr subnet_mask = 7;
  optional Ipv4Addr broadcast_addr = 8;
  repeated Ipv4Addr dns_servers = 9;
  repeated Ipv4Addr gateways = 10;
  repeated Ipv4Addr ntp_servers = 11;
  optional uint32 mtu = 12;
  optional string host_name = 13;
  optional string domain_name = 14;
  MacAddress mac_addr = 15;
  uint32 version = 16;

}
// Todo implement v6 lease
message DhcpV6Lease {

}
// Response to netavark on successful teardown
message OperationResponse {
  bool success = 1;
}

message MacAddress {
  bytes bytes = 1;
}
message Ipv4Addr {
  bytes v4 = 1;
}

message Ipv6Addr {
  bytes v6 = 1;
}
